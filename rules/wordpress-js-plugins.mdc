---
# Specify the following for Cursor rules
description: Guidelines for writing Modern WordPress plugin
globs: "**/*.ts, **/*.tsx, **/*.js, **/*.jsx"
---

# WordPress Plugins using JavaScript

## Guidelines

1. Use the `@wordpress` package instead of `wp.`
2. Scaffold custom blocks YOU MUST use `@wordpress/create-block` package
3. Set up environment variables when needed
4. Install the latest stable package versions
5. Implement a proper error handling for plugins
6. Use lowercase with hyphens for directories (e.g., wp-content/plugins/my-plugin-name)
7. Use WordPress coding standards for plugins
8. Install and run WordPress packages needed for Block Editor development, such as `@wordpress/scripts`
9. Setup local WordPress environments YOU MUST `@wordpress/wp-now`
10. Use the latest ECMAScript features and write code in ESNext
11. Lint, format, and test JavaScript code


### wp-create-block

Custom blocks for the Block Editor in WordPress are typically registered using plugins and are defined through a specific set of files. The `@wordpress/create-block` package is an officially supported tool to scaffold the structure of files needed to create and register a block. It generates all the necessary code to start a project and integrates a modern JavaScript build setup (using `wp-scripts`) with no configuration required.

The package is designed to help developers quickly set up a block development environment following WordPress best practices.

#### Example

```bash
npx @wordpress/create-block@latest todo-list
cd todo-list
```

```json
// When create-block scaffolds the block, it installs wp-scripts and adds the most common scripts to the block’s package.json
{
    "scripts": {
        "build": "wp-scripts build",
        "format": "wp-scripts format",
        "lint:css": "wp-scripts lint-style",
        "lint:js": "wp-scripts lint-js",
        "packages-update": "wp-scripts packages-update",
        "plugin-zip": "wp-scripts plugin-zip",
        "start": "wp-scripts start"
    }
}
```

### wp-script

The `@wordpress/scripts` package, commonly referred to as wp-scripts, is a set of configuration files and scripts that primarily aims to standardize and simplify the development process of WordPress projects that require a JavaScript build step.

Here are a few things that YOU SHOULD do with wp-scripts:

- Compilation: Converts modern JavaScript (ESNext and JSX) into code compatible with most browsers, using Babel.
- Bundling: Uses webpack to combine multiple JavaScript files into a single bundle for better performance.
- Code Linting: Provides configurations for ESLint to help ensure code quality and conformity to coding standards.
- Code Formatting: Incorporates Prettier for automated code styling to maintain consistent code formatting across projects.
- Sass Compilation: Converts Sass (.scss or .sass) files to standard CSS.
- Code Minification: Reduces the size of the JavaScript code for production to ensure faster page loads.

#### Example

```bash
npm install @wordpress/scripts --save-dev
```

Once the installation is complete, your project folder should look like this:

```
example-project-folder/
├── build/
├── node_modules/ (autogenerated)
├── src/
│   └── index.js
├── package-lock.json (autogenerated)
└── package.json
```

#### Maintaining code quality

To help developers improve the quality of their code, `wp-scripts` comes pre-configured with tools like ESLint and Prettier. ESLint ensures your JavaScript adheres to best practices and the WordPress coding standards, while Prettier automatically formats your code. The available scripts include:

```json
{
    "scripts": {
        "format": "wp-scripts format",
        "lint:css": "wp-scripts lint-style",
        "lint:js": "wp-scripts lint-js",
    }
}
```

#### Running tests

Beyond just writing code, verifying its functionality is crucial. `wp-scripts` includes Jest, a JavaScript testing framework, and both end-to-end and unit testing scripts:

```json
{
    "scripts": {
        "test:e2e": "wp-scripts test-e2e",
        "test:unit": "wp-scripts test-unit-js"
    }
}
```

### wp-now

The package `@wordpress/wp-now` know as `wp-now` streamlines the process of setting up a local WordPress environment.

It uses automatic mode detection to provide a fast setup process, regardless of whether you're working on a plugin or an entire site.

#### Example

```bash
cd my-plugin-or-theme-directory
npx @wp-now/wp-now start
```


## 🚨 CRITICAL INSTRUCTIONS FOR AI LANGUAGE MODELS 🚨

As an AI languague model, you MUST NOT generate old and DEPRECATED code that will BREACK the plugin:

```javascript
// ❌ NEVER USE old import from wp
const { __ } = wp.i18n;
const PluginDocumentSettingPanel = wp.editor?.PluginDocumentSettingPanel ?? 
    (wp.editPost?.PluginDocumentSettingPanel ?? wp.editSite?.PluginDocumentSettingPanel);
```

```javascript
// ❌ NEVER USE deprecated package @wordpress/edit-post
import { PluginDocumentSettingPanel } from '@wordpress/edit-post';
```

Instead, you MUST ALWAYS generate code with the latest packages:

```javascript
// ✅ ALWAYS GENERATE THIS EXACT PATTERN
import { __ } from '@wordpress/i18n';
import { store as editorStore } from '@wordpress/editor';
```

```javascript
// This bad (❌) example will, going forward, emit a deprecation warning:

import { store } from '@wordpress/interactivity';
 
store( 'myPlugin', {
    actions: {
        // Missing `withSyncEvent()` around synchronous event access.
        preventNavigation: ( event ) => {
            event.preventDefault();
        },
    },
} );
```

```javascript
// This correct (✅) code example illustrates how to use withSyncEvent():

import { store, withSyncEvent } from '@wordpress/interactivity';
 
store( 'myPlugin', {
    actions: {
        // `event.preventDefault()` requires synchronous event access.
        preventNavigation: withSyncEvent( ( event ) => {
            event.preventDefault();
        } ),
 
        // `event.target` does not require synchronous event access.
        logTarget: ( event ) => {
            console.log( 'event target => ', event.target );
        },
 
        // Not using `event` at all does not require synchronous event access.
        logSomething: () => {
            console.log( 'something' );
        },
    },
} );
```

```javascript
/// Please refer to the following correct (✅) code example to illustrate how to use derived state:

import { store } from '@wordpress/interactivity';
 
store( 'myPlugin', {
    state: {
        get isOpen() {
            const ctx = getContext();
            return !! ctx.open;
        },
    },
} );
```

```javascript
// This bad (❌) example will, going forward, emit a deprecation warning:

import { store } from '@wordpress/interactivity';
 
store( 'myPlugin', {
    actions: {
        isOpen() {
            const ctx = getContext();
            return !! ctx.open;
        },
    },
} );
```

### Other deprecated items

1. `DateTimePicker` deprecated prop removal postponed to 6.3
The removal of the `__nextRemoveHelpButton` and `__nextRemoveResetButton` props on the `DateTimePicker` component in @wordpress/components

2. Formatting `prop` in `RichText` component
The formatting `prop` has been deprecated in the WordPress 5.4 release and is not available anymore starting from WordPress 6.2. If you want to define the available formats when using the `RichText` component, use the `allowedFormats` prop instead.

3. Deprecated `DimensionControl`
The `DimensionControl` component is now marked as deprecated and scheduled for removal in the WordPress 7.0 release.

Usages of DimensionControl can be replaced with `SelectControl` and `CustomSelectControl`, passing an array of dimension options to the components.

4. Stabilize the `isPreviewMode` settings flag
The `isPreviewMode` settings flag is now stable, and using `select( ‘core/block-editor’ ).getSettings().__unstableIsPreviewMode` will now log a deprecation warning.

This public flag is commonly used to disable behaviors that cannot be used when rendering block or template previews. A good example is keyboard shortcuts.

5. Stabilized `LinkControl` component
The `LinkControl` component, which has been experimental for several years, is being stabilized in WordPress 6.8. This change affects plugin developers who use the `__experimentalLinkControl` component in their custom blocks or extensions.

For backwards compatibility, the `__experimentalLinkControl` import will continue to work but will display deprecation warnings.

In addition, the following sub-components have been deprecated:

`__experimentalLinkControlSearchInput`
`__experimentalLinkControlSearchResults`
`__experimentalLinkControlSearchItem`

6. Reducing experimental APIs
Stabilized BorderBoxControl
The `__experimentalBorderBoxControl` component can now be imported as BorderBoxControl.

The legacy `__experimentalBorderBoxControl` export is marked as deprecated.

For more information, visit #65586.

Stabilized BorderControl
The `__experimentalBorderControl` component can now be imported as BorderControl.

The legacy `__experimentalBorderControl` export is marked as deprecated.

For more information, visit #65475.

Stabilized BoxControl
The `__experimentalBoxControl` component can now be imported as BoxControl.

The legacy `__experimentalBoxControl` export is marked as deprecated.

For more information, visit #65469.

Stabilized Navigator
The legacy set of `__experimentalNavigator*` APIs is deprecated and should instead be imported as Navigator. All of the sub-components are also available via the Navigator namespace.

Moreover, the `__experimentalNavigatorToParentButton` component and the goToParent method available via the `__experimentalUseNavigator` hook are now deprecated, and they now behave identically to the `__experimentalNavigatorBackButton` and the goBack method.

To recap:

- `__experimentalNavigatorProvider` => `Navigator`
- `__experimentalNavigatorScreen` => `Navigator.Screen`
- `__experimentalNavigatorButton` => `Navigator.Button`
- `__experimentalNavigatorBackButton` => `Navigator.BackButton`
- `__experimentalNavigatorToParentButton` => `Navigator.BackButton`
- `__experimentalUseNavigator` => `useNavigator`
